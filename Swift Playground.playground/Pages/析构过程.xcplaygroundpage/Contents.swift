// 析构过程
// 析构器仅适用于类类型，析构器会在类实例被释放之前立即调用。使用 deinit 关键字来编写析构器，类似于使用 init 关键字编写构造器。

// 析构过程原理
// Swift 会在实例不再需要时自动释放它们，以释放资源。Swift 通过自动引用计数（ARC）来管理实例的内存，如 自动引用计数 中所述。通常，在实例被释放时不需要执行手动清理。然而，当你处理自己的资源时，可能需要进行一些额外的清理。
// 类定义中每个类最多只能有一个析构器。析构器不接受任何参数，并且是没有括号的：
/*
 deinit {
     // 执行析构过程
 }
 */
// 析构器会在实例释放之前自动调用。不能自行调用析构器。父类的析构器会被子类继承，并且在子类析构器实现的末尾被自动调用。即使子类没有提供自己的析构器，父类的析构器也总是会被调用。
// 由于实例在析构器调用完成后才会被释放，因此析构器可以访问该实例的所有属性，并可以根据这些属性修改其行为（例如查找需要关闭的文件的名称）。
